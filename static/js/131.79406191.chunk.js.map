{"version":3,"file":"static/js/131.79406191.chunk.js","mappings":"6LACA,EAA2B,0BAA3B,EAA8D,wBAA9D,EAAkG,2BCAlG,EAAwB,0B,iBCYxB,EATmB,SAACA,GAChB,IAAIC,EAAI,mBAAeD,EAAME,IAC7B,OACI,gBAAKC,UAAWC,EAAc,UAC1B,SAAC,KAAO,CAACC,GAAIJ,EAAK,SAAED,EAAMM,QAGtC,ECVA,EAA2B,2BCM3B,EAJiB,SAACN,GACd,OAAO,gBAAKG,UAAWC,EAAiB,SAAEJ,EAAMO,SACpD,E,SCgEA,EA/DgB,SAAH,GAAoE,IAA9DC,EAAoB,EAApBA,qBAAsBC,EAAW,EAAXA,YAAaC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAEvDC,EAAsCF,EAAtCE,QAASC,EAA6BH,EAA7BG,SAAUC,EAAmBJ,EAAnBI,eAEvBC,EAAkBH,EACjBI,KAAI,SAACC,EAAGC,GAAK,OACV,SAAC,EAAU,CAEPhB,GAAIe,EAAEf,GACNI,KAAMW,EAAEX,MAFHY,EAGP,IAENC,EAAmBN,EAClBG,KAAI,SAACI,EAAGF,GAAK,OACV,SAAC,EAAQ,CAELX,QAASa,EAAEb,SADNW,EAEP,IAYV,OAAIP,GAGA,qBAASR,UAAWC,EAAiB,WAEjC,gBAAKD,UAAWC,EAAe,SACzBW,KAGN,iBAAKZ,UAAWC,EAAkB,WAC9B,yBAAOe,KAEP,0BACI,qBACIE,MAAQP,EACRQ,SApBE,SAACC,GACnB,IAAIC,EAAOD,EAAEE,OAAOJ,MACpBb,EAAqBgB,EACzB,EAkBoBE,YAAY,qBACZpB,KAAK,aAIb,0BACI,mBACIqB,QAhCD,WACflB,GACJ,EA8B4C,iCAvBzB,SAAC,KAAQ,CAACJ,GAAG,UAgCpC,E,iBCtDA,GAAeuB,E,OAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KARkB,SAACC,GACnB,MAAO,CACHrB,YAAaqB,EAAMrB,YAE3B,GAI6B,CAAEF,qBAAAA,EAAAA,GAAsBC,YAAAA,EAAAA,KAFrD,CAGEuB,E,sGCZWH,EAA4B,SAACI,GAWtC,OAAOH,EAAAA,EAAAA,KAJ0B,SAACC,GAAK,MAAM,CACzCpB,OAAQoB,EAAMG,KAAKvB,OACtB,GAEMmB,EATmB,SAAC9B,GACvB,OAAKA,EAAMW,QACJ,SAACsB,GAAS,UAAKjC,KADI,SAAC,KAAQ,CAACK,GAAG,UAE3C,GAOJ,C","sources":["webpack://way-of-the-samurai/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://way-of-the-samurai/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","webpack://way-of-the-samurai/./src/components/Dialogs/Messages/Messages.module.css?2673","components/Dialogs/Messages/Messages.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthNavigateComponent.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"_wrapper\":\"Dialogs__wrapper__DZ+Fj\",\"_items\":\"Dialogs__items__-5x6W\",\"_messages\":\"Dialogs__messages__jjGHY\"};","// extracted by mini-css-extract-plugin\nexport default {\"_item\":\"DialogItem__item__i9r8x\",\"_item__active\":\"DialogItem__item__active__kdm9H\"};","import React from 'react';\r\nimport classes from './DialogItem.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = `/dialogs/${props.id}`;\r\n    return (\r\n        <div className={classes._item}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogItem;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"_message\":\"Messages__message__rYBGg\"};","import React from 'react';\r\nimport classes from './Messages.module.css';\r\n\r\nconst Messages = (props) => {\r\n    return <div className={classes._message}>{props.message}</div>;\r\n};\r\n\r\nexport default Messages;\r\n","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Messages from './Messages/Messages';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nconst Dialogs = ({ updateNewMessageBody, sendMessage, dialogsPage, isAuth }) => {\r\n\r\n    const { dialogs, messages, newMessageBody } = dialogsPage;\r\n\r\n    let dialogsElements = dialogs\r\n        .map((d, index) =>\r\n            <DialogItem\r\n                key={index}\r\n                id={d.id}\r\n                name={d.name}\r\n            />\r\n        );\r\n    let messagesElements = messages\r\n        .map((m, index) =>\r\n            <Messages\r\n                key={index}\r\n                message={m.message}\r\n            />\r\n        );\r\n\r\n    let addNewDialog = () => {\r\n        sendMessage();\r\n    };\r\n\r\n    let onMessageChange = (e) => {\r\n        let body = e.target.value;\r\n        updateNewMessageBody(body);\r\n    };\r\n\r\n    if(!isAuth) return <Navigate to='/login'/>;\r\n\r\n    return (\r\n        <section className={classes._wrapper}>\r\n\r\n            <div className={classes._items}>\r\n                { dialogsElements }\r\n            </div>\r\n\r\n            <div className={classes._messages}>\r\n                <div>{ messagesElements }</div>\r\n\r\n                <div>\r\n                    <textarea\r\n                        value={ newMessageBody }\r\n                        onChange={ onMessageChange }\r\n                        placeholder='Enter your message'\r\n                        name='field'\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <button\r\n                        onClick={ addNewDialog }\r\n                    >\r\n                        Add dialog\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport { updateNewMessageBody, sendMessage } from '../../redux/dialogsReducer';\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from 'react-redux';\r\nimport {withAuthNavigateComponent} from '../../hoc/withAuthNavigateComponent';\r\nimport {compose} from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    withAuthNavigateComponent,\r\n    connect(mapStateToProps, { updateNewMessageBody, sendMessage })\r\n)(Dialogs);\r\n","import {Navigate} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport React from 'react';\r\n\r\nexport const withAuthNavigateComponent = (Component) => {\r\n\r\n    const NavigateComponent = (props) => {\r\n        if (!props.isAuth) return <Navigate to='/login'/>\r\n        return <Component {...props}/>;\r\n    }\r\n\r\n    let mapStateToPropsForNavigate = (state) => ({\r\n        isAuth: state.auth.isAuth\r\n    });\r\n\r\n    return connect(mapStateToPropsForNavigate)(NavigateComponent);\r\n};\r\n"],"names":["props","path","id","className","classes","to","name","message","updateNewMessageBody","sendMessage","dialogsPage","isAuth","dialogs","messages","newMessageBody","dialogsElements","map","d","index","messagesElements","m","value","onChange","e","body","target","placeholder","onClick","compose","withAuthNavigateComponent","connect","state","Dialogs","Component","auth"],"sourceRoot":""}